#!/bin/bash

set -e

if [ $(whoami) == "root" ]; then
    echo "Do not run as root!" 1>&2
    exit 1
fi

GCE_PROJECT="rancher-dev"

gcloud -v >/dev/null 2>&1 || {
    echo "gcloud command not found." 1>&2
    exit 1
}

print_help()
{
    cat 1>&2 <<EOF
gce-10acre-ranch Usage:
    gce-10acre-ranch [opts] 
    -a - Agent Container:
            needs full container repo/name[:tag]
    -b - Build a new cluster
    -c - Cluster name[Required]
    -d - DELETE ALL NODES
    -i - Show the IP address of the master
    -h - Print this message
    -l - List nodes
    -n - Number of nodes 
    -s - Server Container:
            needs full container repo/name[:tag] 
    -o - OS image
        centos-7
        coreos-alpha
        coreos-beta
        coreos-stable
        ubuntu
EOF
}

while getopts ":a:bc:dhiln:o:s:" opt;do
    case $opt in
    a)
        AGENT_CONTAINER="${OPTARG}"
        ;;
    b)
        BUILD_CLUSTER_FLAG="true"
        ;;
    c)
        # Add 10acre so that you can't list/delete lots of hosts easily.
        CLUSTER_NAME="${OPTARG}-10acre"
        MASTER_NAME="${CLUSTER_NAME}-master-0"
        ;;
    d)
        DELETE_NODES_FLAG="true"
        ;;
    h)
        print_help
        exit 1
        ;;
    i)
        MASTER_IP_FLAG="true"
        ;;
    l)
        LIST_NODES_FLAG="true"
        ;;
    n)
        INSTANCE_COUNT=${OPTARG}
        ;;
    o)
        OS_FAMILY=${OPTARG}
        ;;
    s)
        SERVER_CONTAINER="${OPTARG}"
        ;;
    \?)
        echo "Invalid arguemnts" >&2
        print_help
        exit 1
        ;;
    :)
        echo "Option -${OPTARG} requires arguement." >&2
        print_help
        exit 1
        ;;
    esac
done
shift $((OPTIND-1))

validate_vars()
{
    if [ -z ${CLUSTER_NAME} ]; then
        echo "Need to specify cluster name" >&2
        print_help
        exit 1
    fi
    if [[ -z ${INSTANCE_COUNT} && "${BUILD_CLUSTER_FLAG}" == "true" ]]; then
        echo "Please specify number of nodes with -n" >&2
        print_help
        exit 1
    fi
}

list_nodes()
{
    gcloud compute instances list --project ${GCE_PROJECT} --zone us-central1-f --regex "${CLUSTER_NAME}.*"
}

delete_nodes()
{
    NODES=$(list_nodes | grep -v ^NAME | cut -d' ' -f1)

    # This will prompt the user to confirm.
    gcloud compute instances delete --project ${GCE_PROJECT} --zone us-central1-f $NODES
}

get_master_ip()
{
    IP=$(gcloud compute instances describe "${MASTER_NAME}" --project ${GCE_PROJECT} --zone us-central1-f | grep natIP | cut -d':' -f2)
    echo $IP
}

get_os_image()
{
    local image

    # Has to be a better more dynamic way...that also isn't slow.
    case $OS_FAMILY in
        "ubuntu")
            image="https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20141031a"
            ;;
        "coreos-alpha")
            image="https://www.googleapis.com/compute/v1/projects/coreos-cloud/global/images/coreos-alpha-509-1-0-v20141124"
            ;;
        "coreos-beta")
            image="https://www.googleapis.com/compute/v1/projects/coreos-cloud/global/images/coreos-beta-494-1-0-v20141124"
            ;;
        "coreos-stable")
            image="https://www.googleapis.com/compute/v1/projects/coreos-cloud/global/images/coreos-stable-444-5-0-v20141016"
            ;;
        "centos-7")
            image="https://www.googleapis.com/compute/v1/projects/centos-cloud/global/images/centos-7-v20141108"
            ;;
        *)
            image="https://www.googleapis.com/compute/v1/projects/ubuntu-os-cloud/global/images/ubuntu-1404-trusty-v20141031a"
            ;;
    esac

    echo "${image}"

}

gcloud_create()
{
    gcloud compute instances create ${1} \
        --zone "us-central1-f" --machine-type "n1-standard-1" \
        --network "default" \
        --project "${GCE_PROJECT}" \
        --metadata-from-file startup-script=${2} \
        --maintenance-policy "MIGRATE" \
        --scopes "https://www.googleapis.com/auth/devstorage.read_only" \
        --tags "alt-http-server" \
        --image $(get_os_image)
}


generate_build_script() # signature: role container
{
    local container
    local default_container
    local build_file
    local docker_opts
    local docker_cmd

    case $1 in
        master)
            default_container="rancher/server"

            docker_opts="run -d -p 8080:8080"
            build_file="/tmp/10acre-master-build.sh"
            ;;
        worker)
            default_container="rancher/agent"

            IP=$(get_master_ip)
            docker_opts="run --rm -it -v /var/run/docker.sock:/var/run/docker.sock"
            docker_cmd="http://${IP}:8080"
            build_file="/tmp/10acre-worker-build.sh"
            ;;
        *)
            echo "Can not generate build script"
            exit 1
            ;;
    esac

    if [ -z ${2} ]; then
        container=${default_container}
    else
        container="${2}"
    fi

    cat > ${build_file} << EOF
#!/bin/bash

curl -sSL --retry 5 --retry-delay 10 https://get.docker.com/| sh
sleep 5
docker ${docker_opts} ${container} ${docker_cmd}
EOF
}

build_master()
{
    generate_build_script "master" "${SERVER_CONTAINER}"
    gcloud_create "${MASTER_NAME}" "/tmp/10acre-master-build.sh"
}

build_compute()
{
    local instances
    
    for i in $(seq 1 ${INSTANCE_COUNT}); do
        instances="${CLUSTER_NAME}-${i} ${instances}"
    done

    generate_build_script "worker" "${AGENT_CONTAINER}"
    gcloud_create "${instances}" "/tmp/10acre-worker-build.sh"
}

build_cluster()
{
    build_master
    build_compute
}

main() 
{
    validate_vars
    if [ "${LIST_NODES_FLAG}" = "true" ]; then
        list_nodes "$CLUSTER_NAME"
    elif [ "${LIST_NODES_FLAG}" = "true" ]; then
        list_nodes
    elif [ "${MASTER_IP_FLAG}" = "true" ]; then
        get_master_ip
    elif [ "${DELETE_NODES_FLAG}" = "true" ]; then 
        delete_nodes
    elif [ "${BUILD_CLUSTER_FLAG}" = "true" ]; then
        build_cluster
    fi
}

main
